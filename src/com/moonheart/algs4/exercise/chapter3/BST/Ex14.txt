3.2.14 Give nonrecursive implementations of min(), max(), floor(), ceiling(),
rank(), and select().

Ans:

public Key min() {
    if(isEmpty()) return null;
    Node x = root;
    while(x.left!=null) {
        x = x.left;
    }
    return x.key;
}

public Key max() {
    if(isEmpty()) return null;
    Node x = root;
    while(x.left!=null) {
        x = x.right;
    }
    return x.key;
}
// the largest key smaller or equal to the key.
public Key floor(Key key) {
    if (key == null) throw new IllegalArgumentException("argument to floor() is null");
    if(isEmpty()) return null;
    Node x = root;
    while(x != null) {
        int comp = x.key.compareTo(key);
        if(comp == 0) return x.key;
        if(comp < 0){
            if (x.right.min().compareTo(key) > 0) return x.key;
            else x=x.right;
        }
        else {
            x = x.left;
        }
    }
    return null; // the min is greater than the key
}

// the smallest key greater or equal to the key.
public Key ceiling(Key key) {
    if (key == null) throw new IllegalArgumentException("argument to ceiling() is null");
    if(isEmpty()) return null;
    Node x = root;
    while(x != null) {
        int comp = x.key.compareTo(key);
        if(comp == 0) return x.key;
        if(comp < 0){
            x = x.right
        }
        else {
            if (x.left.max().compareTo(key) < 0) return x.key;
            else x=x.left;
        }
    }
    return null; // the max is smaller than the key
}
